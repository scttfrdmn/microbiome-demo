AWSTemplateFormatVersion: '2010-09-09'
Description: 'Microbiome Demo - Real-Time Progress Tracking Resources'

Parameters:
  DataBucketName:
    Type: String
    Description: 'Name of the S3 bucket for workflow data and progress tracking'
  NotificationEmail:
    Type: String
    Description: 'Email address for workflow notifications (optional)'
    Default: ''

Conditions:
  HasNotificationEmail:
    !Not [!Equals [!Ref NotificationEmail, '']]

Resources:
  # Lambda execution role with permissions for S3 and CloudWatch Logs
  ProgressLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: S3AccessPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:ListBucket
                Resource:
                  - !Sub arn:aws:s3:::${DataBucketName}
                  - !Sub arn:aws:s3:::${DataBucketName}/*
        - PolicyName: SNSPublishPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - sns:Publish
                Resource:
                  - !GetAtt WorkflowNotificationTopic.TopicArn

  # Lambda function for progress notification
  ProgressNotificationFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: microbiome-progress-notification
      Handler: index.lambda_handler
      Role: !GetAtt ProgressLambdaRole.Arn
      Runtime: python3.8
      Timeout: 60
      MemorySize: 128
      Environment:
        Variables:
          DATA_BUCKET: !Ref DataBucketName
      Code:
        ZipFile: |
          import json
          import boto3
          import os
          import logging
          import time
          from datetime import datetime

          # Configure logging
          logger = logging.getLogger()
          logger.setLevel(logging.INFO)

          # Initialize S3 client
          s3 = boto3.client('s3')
          sns = boto3.client('sns')

          def lambda_handler(event, context):
              """
              Lambda function to handle progress notifications from Nextflow workflow.
              
              This function is triggered by S3 events when progress files are updated.
              It processes the progress data and can send notifications or update dashboard data.
              """
              logger.info(f"Received event: {json.dumps(event)}")
              
              try:
                  # Extract bucket and key from the event
                  bucket = event['Records'][0]['s3']['bucket']['name']
                  key = event['Records'][0]['s3']['object']['key']
                  
                  logger.info(f"Processing update from {bucket}/{key}")
                  
                  # Only process progress.json updates
                  if not key.endswith('progress.json'):
                      logger.info(f"Skipping non-progress file: {key}")
                      return {
                          'statusCode': 200,
                          'body': json.dumps('Skipped non-progress file')
                      }
                  
                  # Get the workflow ID from the key
                  # Expected format: progress/{workflow_id}/progress.json
                  workflow_id = key.split('/')[1] if len(key.split('/')) >= 3 else 'unknown'
                  
                  # Download the progress file
                  response = s3.get_object(Bucket=bucket, Key=key)
                  progress_data = json.loads(response['Body'].read().decode('utf-8'))
                  
                  # Log progress information
                  logger.info(f"Workflow {workflow_id} progress: {progress_data.get('percent_complete', 0)}% complete")
                  logger.info(f"Status: {progress_data.get('status', 'unknown')}")
                  logger.info(f"Elapsed time: {progress_data.get('elapsed_time_formatted', 'unknown')}")
                  logger.info(f"Estimated remaining: {progress_data.get('estimated_remaining_formatted', 'unknown')}")
                  
                  # Prepare data for dashboard
                  dashboard_data = {
                      'timestamp': int(time.time()),
                      'update_time': datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
                      'workflow_id': workflow_id,
                      'percent_complete': progress_data.get('percent_complete', 0),
                      'status': progress_data.get('status', 'unknown'),
                      'elapsed_time': progress_data.get('elapsed_time_formatted', 'unknown'),
                      'remaining_time': progress_data.get('estimated_remaining_formatted', 'unknown'),
                      'processes': {
                          'completed': progress_data.get('completed_count', 0),
                          'total': progress_data.get('total_processes', 0)
                      }
                  }
                  
                  # Upload dashboard data for real-time display
                  dashboard_key = f'dashboard/data/progress_{workflow_id}.json'
                  s3.put_object(
                      Bucket=bucket,
                      Key=dashboard_key,
                      Body=json.dumps(dashboard_data, indent=2),
                      ContentType='application/json'
                  )
                  
                  # Also update the latest progress file for the dashboard
                  latest_key = 'dashboard/data/latest_progress.json'
                  s3.put_object(
                      Bucket=bucket,
                      Key=latest_key,
                      Body=json.dumps(dashboard_data, indent=2),
                      ContentType='application/json'
                  )
                  
                  logger.info(f"Dashboard data updated at {dashboard_key} and {latest_key}")
                  
                  # If workflow completed, create a summary notification
                  if progress_data.get('status') == 'completed':
                      logger.info(f"Workflow {workflow_id} completed successfully!")
                      
                      # Send SNS notification if topic ARN is provided
                      topic_arn = os.environ.get('SNS_TOPIC_ARN')
                      if topic_arn:
                          message = f"Workflow {workflow_id} completed successfully!\n\n"
                          message += f"Status: {progress_data.get('status')}\n"
                          message += f"Completed at: {progress_data.get('end_time_human', 'unknown')}\n"
                          message += f"Total runtime: {progress_data.get('total_runtime_formatted', 'unknown')}\n"
                          message += f"\nSee dashboard for full results."
                          
                          sns.publish(
                              TopicArn=topic_arn,
                              Subject=f"Microbiome Workflow {workflow_id} Completed",
                              Message=message
                          )
                          logger.info(f"Completion notification sent to SNS topic: {topic_arn}")
                  
                  return {
                      'statusCode': 200,
                      'body': json.dumps('Progress update processed successfully')
                  }
                  
              except Exception as e:
                  logger.error(f"Error processing progress update: {str(e)}")
                  return {
                      'statusCode': 500,
                      'body': json.dumps(f'Error: {str(e)}')
                  }
      Tags:
        - Key: Project
          Value: microbiome-demo

  # S3 event notification configuration for progress updates
  ProgressBucketPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt ProgressNotificationFunction.Arn
      Principal: s3.amazonaws.com
      SourceArn: !Sub arn:aws:s3:::${DataBucketName}

  # SNS Topic for workflow notifications
  WorkflowNotificationTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: Microbiome Workflow Notifications
      TopicName: microbiome-workflow-notifications

  # SNS Subscription (email) - only created if email is provided
  WorkflowNotificationSubscription:
    Type: AWS::SNS::Subscription
    Condition: HasNotificationEmail
    Properties:
      Protocol: email
      Endpoint: !Ref NotificationEmail
      TopicArn: !Ref WorkflowNotificationTopic

Outputs:
  ProgressLambdaArn:
    Description: ARN of the progress notification Lambda function
    Value: !GetAtt ProgressNotificationFunction.Arn
  
  NotificationTopicArn:
    Description: ARN of the SNS notification topic
    Value: !GetAtt WorkflowNotificationTopic.TopicArn
  
  BucketName:
    Description: Name of the S3 bucket for progress tracking
    Value: !Ref DataBucketName
  
  # Instructions for setting up S3 notifications (can't be done directly in CloudFormation)
  SetupInstructions:
    Description: Instructions for setting up S3 event notifications
    Value: !Sub |
      After stack creation, set up S3 event notifications on ${DataBucketName} using:
      
      aws s3api put-bucket-notification-configuration \\
        --bucket ${DataBucketName} \\
        --notification-configuration '{
          "LambdaFunctionConfigurations": [
            {
              "LambdaFunctionArn": "${ProgressNotificationFunction.Arn}",
              "Events": ["s3:ObjectCreated:*"],
              "Filter": {
                "Key": {
                  "FilterRules": [
                    {
                      "Name": "prefix",
                      "Value": "progress/"
                    },
                    {
                      "Name": "suffix",
                      "Value": "progress.json"
                    }
                  ]
                }
              }
            }
          ]
        }'