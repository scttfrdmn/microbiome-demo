/*
 * Nextflow configuration file for the Microbiome Demo
 */

// Default parameters
params {
    // Bucket name parameter is used to build paths for other parameters
    bucket_name = 'microbiome-demo-bucket'
    
    // Input/output parameters
    samples = "s3://${params.bucket_name}/input/sample_list.csv"
    output = "s3://${params.bucket_name}/results"
    kraken_db = "s3://${params.bucket_name}/reference/kraken2_db"
    metaphlan_db = "s3://${params.bucket_name}/reference/metaphlan_db"
    humann_db = "s3://${params.bucket_name}/reference/humann_db"
    
    // AWS specific parameters
    awsRegion = 'us-east-1'
    awsQueue = 'microbiome-demo-queue'
    awsGpuQueue = 'microbiome-demo-gpu-queue'
}

// Process-specific configuration
process {
    executor = 'awsbatch'
    queue = params.awsQueue
    container = 'public.ecr.aws/lts/microbiome-tools:latest'
    
    withName: 'preprocess_reads' {
        cpus = 4
        memory = '8 GB'
    }
    
    withName: 'taxonomic_classification_kraken' {
        cpus = 4
        memory = '16 GB'
        queue = params.awsGpuQueue
        container = 'public.ecr.aws/lts/kraken2-gpu:latest'
    }
    
    withName: 'kraken_reports' {
        cpus = 2
        memory = '4 GB'
    }
    
    withName: 'metaphlan_analysis' {
        cpus = 8
        memory = '16 GB'
    }
    
    withName: 'merge_metaphlan' {
        cpus = 2
        memory = '4 GB'
    }
    
    withName: 'merge_humann' {
        cpus = 4
        memory = '8 GB'
    }
    
    withName: 'diversity_analysis' {
        cpus = 4
        memory = '8 GB'
    }
    
    withName: 'create_summary' {
        cpus = 2
        memory = '4 GB'
    }
    
    withName: 'upload_results' {
        cpus = 2
        memory = '4 GB'
    }
    
    withName: 'generate_cost_report' {
        cpus = 1
        memory = '2 GB'
    }
}

// AWS Batch executor settings
aws {
    region = params.awsRegion
    batch {
        cliPath = '/usr/local/bin/aws'
        jobRole = 'arn:aws:iam::AWS_ACCOUNT_ID:role/microbiome-demo-batch-job-role'
        volumes = '/tmp'
    }
}

// Docker container configuration
docker {
    enabled = true
    fixOwnership = true
    runOptions = '-u $(id -u):$(id -g)'
}

// Execution profiles
profiles {
    // AWS batch profile
    aws {
        process.executor = 'awsbatch'
        aws.region = params.awsRegion
        aws.batch.cliPath = '/usr/local/bin/aws'
    }
    
    // Local testing profile
    local {
        process.executor = 'local'
        docker.enabled = true
    }
    
    // Test profile with reduced data
    test {
        params.samples = 's3://microbiome-demo-bucket/input/test_sample_list.csv'
        params.output = 's3://microbiome-demo-bucket/results/test_run'
    }
}

// Report and trace options
report {
    enabled = true
    file = "${params.output}/reports/nextflow_report.html"
}

trace {
    enabled = true
    file = "${params.output}/reports/nextflow_trace.txt"
    fields = 'task_id,name,status,exit,realtime,cpus,%cpu,memory,%mem,rss'
}

timeline {
    enabled = true
    file = "${params.output}/reports/nextflow_timeline.html"
}

// Manifest
manifest {
    name = 'Microbiome Demo Pipeline'
    author = 'AWS'
    description = 'Demo pipeline for 15-minute microbiome analysis'
    version = '1.0.0'
    mainScript = 'main.nf'
}

// Function to help with AWS reporting
def spotCostSavings() {
    def onDemandRate = 0.136  // c7g.2xlarge on-demand rate
    def spotRate = 0.0408     // c7g.2xlarge spot rate
    def hours = Integer.parseInt(System.getenv('NEXTFLOW_SPOT_HOURS') ?: "1")
    def savings = (onDemandRate - spotRate) * hours
    return savings
}

// Function to help with dashboard monitoring
def getMetrics() {
    def metrics = [
        'cpuHours': Integer.parseInt(System.getenv('NEXTFLOW_CPU_HOURS') ?: "0"),
        'gpuHours': Integer.parseInt(System.getenv('NEXTFLOW_GPU_HOURS') ?: "0"),
        'totalCost': Float.parseFloat(System.getenv('NEXTFLOW_TOTAL_COST') ?: "0.0")
    ]
    return metrics
}

// AWS environments will replace this with the actual account ID
aws.batch.jobRole = aws.batch.jobRole.replace('AWS_ACCOUNT_ID', System.getenv('AWS_ACCOUNT_ID') ?: '123456789012')
